(()=>{"use strict";class e{constructor(e,t=null){this.modalSelector=e,this.triggerSelector=t,this.initModal()}initModal(){const e=this.getModal(),t=this.triggerSelector?document.querySelectorAll(this.triggerSelector):null;return!!e&&(t&&t.forEach((e=>{e.addEventListener("click",(()=>this.openModal()))})),e.addEventListener("click",(t=>{t.target!=e&&""!=t.target.getAttribute("data-close")||this.closeModal(e)})),document.addEventListener("keydown",(t=>{"Escape"===t.code&&e.classList.contains("show")&&this.closeModal(e)})),!0)}openModal(){const e=this.getModal();e.classList.remove("hide"),e.classList.add("show"),document.body.style.overflow="hidden"}closeModal(){const e=this.getModal();e.classList.add("hide"),e.classList.remove("show"),document.body.style.overflow=""}getModal(){return document.querySelector(this.modalSelector)}}class t{constructor(e){this.form=e}showError(e,s){const r=this.form.querySelector(`[name=${e}]`),o=t.getErrorBox(r);r.classList.add("form-control__error"),o.innerHTML=s,o.classList.remove("hide")}cleanError(e){const s=t.getErrorBox(e);e.classList.remove("form-control__error"),s.classList.add("hide"),s.innerHTML=""}static getErrorBox(e){return e.previousElementSibling.querySelector(".modal__error-message")}}class s{constructor(e=null){this.modalInstance=e}showSuccessMessage(){(class{static renderModal(e,t){const s=document.createElement("div");return s.classList.add("modal"),s.classList.add("hide"),s.id=t,s.innerHTML=`\n                <div class="modal__dialog">\n                    <div data-close="" class="modal__close">×</div>\n                    ${e}\n                </div>\n        `,document.querySelector("body").appendChild(s),s}}).renderModal('<div class="modal__feedback-title">Your message successfully sent</div>',"modalSuccess");const t=new e("#modalSuccess");this.modalInstance.closeModal(),t.openModal()}}class r{static patternName=/^[а-яёА-ЯЁa-zA-Z\s]+$/;static patternMail=/^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z])+$/;static errorMessages=["Name cannot be empty","Email cannot be empty","Incorrect Email","Message cannot be empty"];constructor(e){this.form=e}validForm(e,t){let s="";const o={name:()=>{0!=e.get("name").length&&r.patternName.test(e.get("username"))||(s=r.errorMessages[0])},email:()=>{0==e.get("email").length?s=r.errorMessages[1]:r.patternMail.test(e.get("email"))||(s=r.errorMessages[2])},message:()=>{0==e.get("message").length&&(s=r.errorMessages[3])}};return o[t]?(o[t](),s):""}}class o{constructor(e,o=null){this.form=e,this.fields=this.form.querySelectorAll(".form-control"),this.btn=this.form.querySelector("[type=submit]"),this.isError=!1,this.url="https://jsonplaceholder.typicode.com/posts",this.errors=new t(e),this.validation=new r(e),this.messages=new s(o),this.registerEventsHandler()}registerEventsHandler(){this.btn.addEventListener("click",this.submitForm.bind(this)),this.form.addEventListener("focus",(()=>{const e=document.activeElement;e!==this.btn&&(this.errors.cleanError(e),this.isError=!1)}),!0)}async submitForm(e){e.preventDefault();const t=new FormData(this.form);let s;for(let e of t.keys())s=this.validation.validForm(t,e),0!=s.length&&(this.isError=!0,this.errors.showError(e,s));if(this.isError)return;const r=Object.fromEntries(t.entries());(await class{static request(e,t,s=null,r=null){return new Promise((o=>{const a=r?{body:JSON.stringify(r)}:{},n=(new Date).getTime();fetch(e,{method:t.toUpperCase(),headers:{"Content-type":"application/json",...s},...a}).then((e=>{if(e.status>=200&&e.status<300)return e.json();{const t=new Error(res?.statusText??"Неизвестная ошибка");throw t.response=e,t}})).then((e=>o({success:!0,data:e,time:((new Date).getTime()-n)/1e3}))).catch((e=>o({success:!1,error:{message:e?.message??"Неизвестная ошибка",status:e.response?.status??520},time:((new Date).getTime()-n)/1e3})))}))}}.request(this.url,"POST",{},r)).success&&(this.messages.showSuccessMessage(),this.form.reset())}}document.addEventListener("DOMContentLoaded",(()=>{const t=new e(".modal",".offer__btn-form");new o(document.querySelector(".modal__form"),t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,